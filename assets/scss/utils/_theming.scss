// usage color: themeColor("theme_name", "color_name")
// eg. color: themeColor("dark", "primary")
@function theme-has-color($theme, $color_name) {
  @if map-has-key($themes, $theme) {
    $curr_theme: map-get($themes, $theme);
    @if map-has-key($curr_theme, $color_name) {
      @return map-get($curr_theme, $color_name);
    }
  }
  @warn "Undefined color: `#{$color_name}` in theme: `#{$theme}`";
  @return null;
}

// mixin to generate theme based css colors
// usage "@include theme-aware('css_property_target', 'color_name')"
// eg. "@include theme-aware('background', 'bg-primary')"
@mixin theme-aware($property, $color) {
  @each $theme, $colors in $themes {
    .theme-#{$theme} & {
      $selected_color: theme-has-color($theme, $color);
      @if $selected_color {
        #{$property}: $selected_color;
      }
    }
  }
}
@mixin theme-aware-important($property, $color) {
  @each $theme, $colors in $themes {
    .theme-#{$theme} & {
      $selected_color: theme-has-color($theme, $color);
      @if $selected_color {
        #{$property}: $selected_color !important;
      }
    }
  }
}
@mixin theme-aware-alpha($property, $color, $alpha) {
  @each $theme, $colors in $themes {
    .theme-#{$theme} & {
      $selected_color: theme-has-color($theme, $color);
      @if $selected_color {
        #{$property}: rgba($selected_color, $alpha);
      }
    }
  }
}

// class def for themes defined in themes.scss
@each $theme_name, $theme in $themes {
  @each $color_type, $color_value in $theme {
    @if $color_type == "text-main" {
      .theme-#{$theme_name} .#{$color_type} {
        color: $color_value !important;
      }
    }
    @else if $color_type == "text-contrast" {
      .theme-#{$theme_name} .#{$color_type} {
        color: $color_value !important;
      }
    }
    @else {
      .theme-#{$theme_name} .#{$color_type} {
        background-color: $color_value !important;
      }
      .theme-#{$theme_name} .text-#{$color_type} {
        color: $color_value !important;
      }
    }
  }
}
